tb
GLOBAL
`timescale 1ns / 1ps 		//`timescale time_unit / time_precision
`define	PERIOD 10			//clock period 

module my_design_tb;
	reg				clk   = 1'b0	;	
	reg				rst_n = 1'b0	;	
	reg		[1:0]	INPUT = 0	;
	wire	[1:0]	OUTPUT		;

	$[0[]0]
	//	Module instantiation
	my_design u_my_design
	(
		.clk	(clk), 
		.rst_n	(rst_n),
		.INPUT	(INPUT),
		.OUTPUT	(OUTPUT)
	);

	// Clock signal and reset signal
	initial begin
		clk = 1'b1; 
		forever
			#(`PERIOD/2'd2)clk = ~clk; 
	end
			
	initial begin
		rst_n = 0;#(`PERIOD*20 + 1'b1); 
		rst_n = 1'b1;
	end 
		
	// Input signal designing
	initial begin 
		INPUT = 1'b1;
		#(`PERIOD*20+1'b1);
		
		INPUT = 1'b0;
		#(`PERIOD*20+1'b1);
		$stop;
	end 

endmodule
[>END<]!$[FingerTextData FingerTextData]@#
mod
GLOBAL
module Mod_NAME(
	input					clk			,
	input					rst_n		,
	input			[1:0]	INPUT		,
	output 	wire	[1:0]	OUTPUT_1	,
	output	reg		[1:0]	OUTPUT_2	,
	output	reg		[1:0]	OUTPUT_3
);

	$[0[]0]
	// Combinational logic
	assign OUTPUT_1 = INPUT;
	always@(*) begin
		OUTPUT_2 = INPUT;
	end
	
	// Sequential logic
	always@(posedge clk, negedge rst_n) begin
		if(!rst_n) begin
			OUTPUT_3 <= 0;
		end
		else begin
			OUTPUT_3 <= INPUT;
		end
	end

endmodule

[>END<]!$[FingerTextData FingerTextData]@#
inst
GLOBAL
	your_module_name u_your_module_name 
	(
	  .clk		(clk),  		// input wire clk
	  .rst_n	(rst_n),		// input wire rst_n
	  .			(),      	
	  .			(),      
	  .			(),    
	  .			(),
	  .			(),
	  .			()
	);
[>END<]!$[FingerTextData FingerTextData]@#
genfor
GLOBAL
	genvar your_genvar_i;
	generate
		for(your_genvar_i = 0;your_genvar_i < CH_NUM; your_genvar_i = your_genvar_i+1) begin:genfor_scope_name
			templete_name u_templete_name (
		      .aclk(clk),                                  										// input wire aclk
		      .aresetn(rst_n),                            										// input wire aresetn
		      .s_axis_config_tvalid(1'b1),  													// input wire s_axis_config_tvalid
		      .s_axis_config_tdata({{6{1'b0}},freq_contr[your_genvar_i*18 +: 18]}),   			// input wire [23 : 0] s_axis_config_tdata
		      .m_axis_data_tvalid(),      														// output wire m_axis_data_tvalid
		      .m_axis_data_tdata({cos[your_genvar_i *16 +: 16],sin[your_genvar_i*16 +: 16]})   	// output wire [31 : 0] m_axis_data_tdata
		    );
		end
	endgenerate
[>END<]!$[FingerTextData FingerTextData]@#
fsm
GLOBAL
	// FSM template
	// State definition
	parameter S_IDLE = 0;
	parameter S_WORK = 1;
	
	// State registers
	reg	[1:0] state_c;
	reg	[1:0] state_n;
	
	// States'transision
	always@(posedge CLK, negedge rst_n) begin
		if(!rst_n)
			state_c <= S_IDLE;
		else
			state_c <= state_n;
	end
	
	// States'judgement
	always@(*) begin
		case(state_c) 
			S_IDLE:begin
				state_n = S_WORK;
			end
			S_WORK:begin
				state_n = S_IDLE;
			end		
			default:begin
				state_n = S_IDLE;
			end
		endcase
	end
	
	// States'output
	always@(posedge CLK, negedge rst_n) begin
		if(!rst_n)
			OUTPUT <= 0;
		else if(state_c == S_IDLE) begin
			OUTPUT <= 0;
		end
		else if(state_c == WORK && INPUT == 1) begin
			OUTPUT <= INPUT;
		end
	end
[>END<]!$[FingerTextData FingerTextData]@#
